package com.student.schooldetails.repository;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;

import com.student.schooldetails.entity.Student;
import com.student.schooldetails.repository.StudentRepository;
import com.student.schooldetails.service.StudentServiceImpl;

@SpringBootTest(classes= {ServiceMockitoTest.class})
public class ServiceMockitoTest {
	@Mock
	StudentRepository studentRep;
	@InjectMocks
	StudentServiceImpl studentService;
	public List<Student> myStudents;
	
	
	@Test
	@Order(1)
	public void test_findAllStudents() {
		myStudents = new ArrayList<Student>();
		myStudents.add(new Student(1,"Mi","Smith High School"));
		myStudents.add(new Student(2,"Yoku","Ranch High School"));
		myStudents.add(new Student(3,"Ted","SmithGen High School"));
		myStudents.add(new Student(4,"Roku","Ranch High School"));
		myStudents.add(new Student(5,"Yo","Ranch High School"));
		myStudents.add(new Student(6,"Ko","Ranch High School"));
		when(studentRep.findAll()).thenReturn(myStudents);
		assertEquals(6,studentService.findAllStudents().size());
		
	}
	
	@Test
	@Order(2)
	public void test_findBySchoolName() {
		myStudents = new ArrayList<Student>();
		myStudents.add(new Student(1,"Mi","Smith High School"));
		myStudents.add(new Student(2,"Yoku","Ranch High School"));
		myStudents.add(new Student(3,"Ted","SmithGen High School"));
		myStudents.add(new Student(4,"Roku","Ranch High School"));
		myStudents.add(new Student(5,"Yo","Ranch High School"));
		myStudents.add(new Student(6,"Ko","Ranch High School"));
		String schoolName ="SmithGen High School";
		when(studentRep.findAll()).thenReturn(myStudents);
		assertEquals(schoolName,studentService.findBySchoolName(schoolName).getSchoolName());
	}
	
	@Test
	@Order(3)
	public void test_saveStudent() {
	    Student student = new Student(7, "Hi", "Intern High School"); // Use 7L for Long
	    when(studentRep.save(student)).thenReturn(student);

	    Student savedStudent = studentService.saveStudent(student);
	    assertEquals(7, savedStudent.getId()); // Compare IDs properly
	    assertEquals("Hi", savedStudent.getName());
	    assertEquals("Intern High School", savedStudent.getSchoolName());
	}
	@Test
	@Order(4)
	public void test_updateStudent() {
	    Long id = 7L;
	    Student existingStudent = new Student(id, "Old Name", "Intern High School");
	    Student updatedStudent = new Student(id, "Ti", "Intern High School");

	    when(studentRep.findById(id)).thenReturn(Optional.of(existingStudent));
	    when(studentRep.save(existingStudent)).thenReturn(existingStudent);

	    Student result = studentService.updateStudent(id, updatedStudent);

	    assertEquals("Ti", result.getName());
	    assertEquals("Intern High School", result.getSchoolName());
	    verify(studentRep).save(existingStudent);
	}
	@Test
	@Order(5)
	
	public void test_deleteStudent_success() {
	    Long id = 7L;

	    // Mock existsById to return true
	    when(studentRep.existsById(id)).thenReturn(true);

	    // Call the method
	    studentService.deleteStudent(id);

	    // Verify deleteById was called
	    verify(studentRep).deleteById(id);
	}


	
}
